/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RuleItemService } from "../ruleItem.service";
import { RuleItemCreateInput } from "./RuleItemCreateInput";
import { RuleItem } from "./RuleItem";
import { RuleItemFindManyArgs } from "./RuleItemFindManyArgs";
import { RuleItemWhereUniqueInput } from "./RuleItemWhereUniqueInput";
import { RuleItemUpdateInput } from "./RuleItemUpdateInput";

export class RuleItemControllerBase {
  constructor(protected readonly service: RuleItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RuleItem })
  async createRuleItem(
    @common.Body() data: RuleItemCreateInput
  ): Promise<RuleItem> {
    return await this.service.createRuleItem({
      data: {
        ...data,

        ruleId: data.ruleId
          ? {
              connect: data.ruleId,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        ruleId: {
          select: {
            id: true,
          },
        },

        ruleText: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RuleItem] })
  @ApiNestedQuery(RuleItemFindManyArgs)
  async ruleItems(@common.Req() request: Request): Promise<RuleItem[]> {
    const args = plainToClass(RuleItemFindManyArgs, request.query);
    return this.service.ruleItems({
      ...args,
      select: {
        createdAt: true,
        id: true,

        ruleId: {
          select: {
            id: true,
          },
        },

        ruleText: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RuleItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ruleItem(
    @common.Param() params: RuleItemWhereUniqueInput
  ): Promise<RuleItem | null> {
    const result = await this.service.ruleItem({
      where: params,
      select: {
        createdAt: true,
        id: true,

        ruleId: {
          select: {
            id: true,
          },
        },

        ruleText: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RuleItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRuleItem(
    @common.Param() params: RuleItemWhereUniqueInput,
    @common.Body() data: RuleItemUpdateInput
  ): Promise<RuleItem | null> {
    try {
      return await this.service.updateRuleItem({
        where: params,
        data: {
          ...data,

          ruleId: data.ruleId
            ? {
                connect: data.ruleId,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          ruleId: {
            select: {
              id: true,
            },
          },

          ruleText: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RuleItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRuleItem(
    @common.Param() params: RuleItemWhereUniqueInput
  ): Promise<RuleItem | null> {
    try {
      return await this.service.deleteRuleItem({
        where: params,
        select: {
          createdAt: true,
          id: true,

          ruleId: {
            select: {
              id: true,
            },
          },

          ruleText: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
